worker_processes  1;
events {
    worker_connections  20240;
    use epoll;
    multi_accept on;
}
http {
    error_log logs/error.log info;
    include       mime.types;
    default_type text/html;
    tcp_nodelay        on;
    init_by_lua_block {
        require "resty.core"
        local lua_resty_waf = require "resty.waf"
        lua_resty_waf.init()
    }
    server {
        listen 80;
        location / {
            access_by_lua_block {
                local lua_resty_waf = require "resty.waf"
                local waf = lua_resty_waf:new()
                waf:set_option("debug", true)
                waf:set_option("mode", "ACTIVE")
                -- waf:set_option("mode", "SIMULATE")
                waf:set_option("event_log_periodic_flush", 5)
                waf:exec()
            }
            header_filter_by_lua_block {
                local lua_resty_waf = require "resty.waf"
                local waf = lua_resty_waf:new()
                waf:exec()
            }
            body_filter_by_lua_block {
                local lua_resty_waf = require "resty.waf"
                local waf = lua_resty_waf:new()
                local gsub = ngx.re.gsub
                waf:exec()
            }
            log_by_lua_block {
                local lua_resty_waf = require "resty.waf"
                local waf = lua_resty_waf:new()
                waf:exec()
                waf:write_log_events()
            }
        }
    }
}